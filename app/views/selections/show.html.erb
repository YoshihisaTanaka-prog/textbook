<p style="color: green"><%= notice %></p>

<%= render @selection %>

<div>
  <%= link_to "Edit this selection", edit_selection_path(@selection) %> |
  <%= link_to "Back to question", mains_path + "/" + @selection.main_id.to_s %>
  <br><br>
  <%= button_to "Destroy this selection", @selection, {method: :delete, data: {turbo_confirm: "削除しますか？"}} %>
</div>
<p><hr></p>
<div>
  <% if @selection.next %>
    <p><%= link_to @selection.next.question, @selection.next %></p>
  <% else %>
    質問文を生成
    <div id="create-main">
      <%= render "mains/form", main: @main, subject: @selection.main.subject_id %>
    </div>
    <hr>
  <% end %>
  <hr>
  <div>
    <h3>解決策</h3>
    <% @selection.all_solutions.each do |solution| %>
      <p>
        <%= link_to solution.title, solution %>
        <% ss = SolutionSelection.find_by(solution_id: solution.id, selection_id: @selection.id) %>
        <% if ss %>
          <%= button_to "関連を削除", ss, {method: :delete, data: {turbo_confirm: "削除しますか？"}} %>
        <% end %>
      </p>
    <% end %>
      解決策を追加<input type='range' min="0" max="1" value="0" onchange="changeStatus()" id="status" style="width: 2em;">解決策を新規作成
    <div id='add-solution'>
      <div>
        <input type="text" id="search-text" onkeyup="searchSolution()" placeholder="検索用">
        <input type="text" id="search-kana" onchange="searchSolution()" placeholder="ふりがな">
        <input type="hidden" id="search-selection" value="<%= @selection.id %>">
      </div>
      <%= form_with(model: @ss) do |form| %>
        <div>
          <%= form.hidden_field :selection_id, value: @selection.id %>
          <%= form.select :solution_id, [] %>
        </div>
        <div>
          <%= form.submit %>
        </div>
      <% end %>
    </div>
    <div id="create-solution" style="display: none;">
      <%= render "solutions/form", solution: @solution, selection: @selection.id %>
    </div>
  </div>
</div>

<script type="text/javascript">
  (function ($) {
    $.fn.autoKana = function (element1, element2, passedOptions) {

        var options = $.extend(
            {
                'katakana': false
            }, passedOptions);

        var kana_extraction_pattern = new RegExp('[^ 　ぁあ-んー]', 'g');
        var kana_compacting_pattern = new RegExp('[ぁぃぅぇぉっゃゅょ]', 'g');
        var elName,
            elKana,
            active = false,
            timer = null,
            flagConvert = true,
            input,
            values,
            ignoreString,
            baseKana;

        elName = $(element1);
        elKana = $(element2);
        active = true;
        _stateClear();

        elName.blur(_eventBlur);
        elName.focus(_eventFocus);
        elName.keydown(_eventKeyDown);

        function start() {
            active = true;
        };

        function stop() {
            active = false;
        };

        function toggle(event) {
            var ev = event || window.event;
            if (event) {
                var el = Event.element(event);
                if (el.checked) {
                    active = true;
                } else {
                    active = false;
                }
            } else {
                active = !active;
            }
        };

        function _checkConvert(new_values) {
            if (!flagConvert) {
                if (Math.abs(values.length - new_values.length) > 1) {
                    var tmp_values = new_values.join('').replace(kana_compacting_pattern, '').split('');
                    if (Math.abs(values.length - tmp_values.length) > 1) {
                        _stateConvert();
                    }
                } else {
                    if (values.length == input.length && values.join('') != input) {
                        if (input.match(kana_extraction_pattern)) {
                            _stateConvert();
                        }
                    }
                }
            }
        };

        function _checkValue() {
            var new_input, new_values;
            new_input = elName.val()
            if (new_input == '' && elKana.val() != '') {
                _stateClear();
                _setKana();
            } else {
                new_input = _removeString(new_input);
                if (input == new_input) {
                    return;
                } else {
                    input = new_input;
                    if (!flagConvert) {
                        new_values = new_input.replace(kana_extraction_pattern, '').split('');
                        _checkConvert(new_values);
                        _setKana(new_values);
                    }
                }
            }
        };

        function _clearInterval() {
            clearInterval(timer);
        };

        function _eventBlur(event) {
            _clearInterval();
        };
        function _eventFocus(event) {
            _stateInput();
            _setInterval();
        };
        function _eventKeyDown(event) {
            if (flagConvert) {
                _stateInput();
            }
        };
        function _isHiragana(chara) {
            return ((chara >= 12353 && chara <= 12435) || chara == 12445 || chara == 12446);
        };
        function _removeString(new_input) {
            if (new_input.indexOf(ignoreString) !== -1) {
                return new_input.replace(ignoreString, '');
            } else {
                var i, ignoreArray, inputArray;
                ignoreArray = ignoreString.split('');
                inputArray = new_input.split('');
                for (i = 0; i < ignoreArray.length; i++) {
                    if (ignoreArray[i] == inputArray[i]) {
                        inputArray[i] = '';
                    }
                }
                return inputArray.join('');
            }
        };
        function _setInterval() {
            var self = this;
            timer = setInterval(_checkValue, 30);
        };
        function _setKana(new_values) {
            if (!flagConvert) {
                if (new_values) {
                    values = new_values;
                }
                if (active) {
                    var _val = _toKatakana(baseKana + values.join(''));
                    elKana.val(_val).change();
                }
            }
        };
        function _stateClear() {
            baseKana = '';
            flagConvert = false;
            ignoreString = '';
            input = '';
            values = [];
        };
        function _stateInput() {
            baseKana = elKana.val();
            flagConvert = false;
            ignoreString = elName.val();
        };
        function _stateConvert() {
            baseKana = baseKana + values.join('');
            flagConvert = true;
            values = [];
        };
        function _toKatakana(src) {
            if (options.katakana) {
                var c, i, str;
                str = new String;
                for (i = 0; i < src.length; i++) {
                    c = src.charCodeAt(i);
                    if (_isHiragana(c)) {
                        str += String.fromCharCode(c + 96);
                    } else {
                        str += src.charAt(i);
                    }
                }
                return str;
            } else {
                return src;
            }
        }
    };
  })(jQuery);
  function onLoad() {
    $(function() {
      $.fn.autoKana('#search-text', '#search-kana');
    });
    searchSolution();
  }
  onLoad();
  function searchSolution() {
    let text = $("#search-text").val();
    window.setTimeout( function(){
      let kana = $("#search-kana").val();
      var alphabetArray = [];
      for (let i = 0; i < 26; i++) {
        alphabetArray.push(String.fromCharCode(65 + i),String.fromCharCode(97 + i))
      }
      for (const c of kana) {
        if(alphabetArray.includes(c)) {
          return
        }
      }
      let selection = $("#search-selection").val();
      $.post("/api/solution", {text: text, kana: kana, selection: selection}, function(data) {
        if (data.length == 0) {
          $("#solution_selection_solution_id").html("<option value=''>該当する解決策がありません。</option>");
          $("#status").val(1);
          changeStatus();
          $("#solution_title").val(text);
          $("#solution_kana").val(kana);
        } else {
          $("#solution_selection_solution_id").html("<option value=''>選択してください。</option>");
          $("#status").val(0);
          changeStatus();
        }
        for (const solution of data) {
          let option = "<option value='" + solution.id + "'>" + solution.title + "</option>";
          $("#solution_selection_solution_id").append(option);
        }
      });
    }, 10 );
  }

  function changeStatus(){
    if ($("#status").val() == "0") {
      $("#add-solution").attr("style", "");
      $("#create-solution").attr("style", "display: none;");
      
    } else {  
      $("#add-solution").attr("style", "display: none;");
      $("#create-solution").attr("style", "");
    }
  }
</script>
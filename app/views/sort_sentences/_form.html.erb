<%= render 'sort_units/form', sort_unit: @unit %>

<%= form_with(model: sort_sentence) do |form| %>
  <% if sort_sentence.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(sort_sentence.errors.count, "error") %> prohibited this sort_sentence from being saved:</h2>

      <ul>
        <% sort_sentence.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div>
    <%= form.collection_select :unit_id, SortUnit.all.order(:grade), :id, :title, { selected: session[:sort_unit_id] } if ["new", "create"].include? action_name %>
    <%= form.collection_select :unit_id, SortUnit.all.order(:grade), :id, :title, { selected: sort_sentence.unit_id } unless ["new", "create"].include? action_name %>
  </div>
  <div>
    <input type="checkbox" id="isLowerCase">文頭を小文字にする。
    <%= form.hidden_field :word1 %>
    <%= form.hidden_field :word2 %>
    <%= form.hidden_field :word3 %>
    <%= form.hidden_field :word4 %>
    <%= form.hidden_field :word5 %>
    <%= form.hidden_field :word6 %>
    <%= form.hidden_field :word7 %>
    <%= form.hidden_field :word8 %>
    <%= form.hidden_field :word9 %>
    <%= form.hidden_field :word10 %>
    <%= form.hidden_field :word11 %>
    <%= form.hidden_field :word12 %>
    <%= form.hidden_field :word13 %>
    <%= form.hidden_field :word14 %>
    <%= form.hidden_field :word15 %>
    <%= form.hidden_field :word16 %>
    <%= form.hidden_field :word17 %>
    <%= form.hidden_field :word18 %>
    <%= form.hidden_field :word19 %>
    <%= form.hidden_field :word20 %>
    <%= form.label :sentence, style: "display: block" %>
    <%= form.text_field :sentence, style: "width: 100%" %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

<script>
  $("#sort_sentence_sentence").on("input", function(){
    splitSentence();
  });

  function splitSentence() {
    let sentence = $("#sort_sentence_sentence").val();
    let words = [""];
    let index = 0;
    let chars = sentence.split("");

    for (let i = 0; i<chars.length; i++){
      let c = chars[i];
      if (c == " ") {
        words.push("");
        index++;
      } else if ([",", "?", "!"].includes(c)) {
        words.push(c);
        index++;
      } else if(c == ".") {
        if(i==chars.length-1){
          words.push(c);
          index++;
        } else{
          words[index] = (words[index] || "") + c;
        }
      } else {
        words[index] = (words[index] || "") + c;
      }
    }
    console.log(words);
    if([
      "All",
      "Although",
      "And",
      "Are",
      "Aren't",
      "Aren’t",
      "As",
      "Because",
      "But",
      "Can",
      "Can't",
      "Can’t",
      "Could",
      "Couldn't",
      "Couldn’t",
      "Did",
      "Didn't",
      "Didn’t",
      "Do",
      "Don't",
      "Don’t",
      "Does",
      "Doesn't",
      "Doesn’t",
      "For",
      "Had",
      "Hadn't",
      "Hadn’t",
      "Has",
      "Hasn't",
      "Hasn’t",
      "Have",
      "Haven't",
      "Haven’t",
      "He",
      "He's",
      "He’s",
      "Her",
      "Here",
      "Him",
      "His",
      "How",
      "If",
      "Is",
      "Isn't",
      "Isn’t",
      "It",
      "It's",
      "It’s",
      "Its",
      "Let",
      "Let's",
      "Let’s",
      "May",
      "Me",
      "Might",
      "Must",
      "Mustn't",
      "Mustn’t",
      "My",
      "No",
      "Nor",
      "Or",
      "Our",
      "Please",
      "Shall",
      "She",
      "She's",
      "She’s",
      "Should",
      "Shouldn't",
      "Shouldn’t",
      "So",
      "That",
      "The",
      "Their",
      "There",
      "These",
      "Them",
      "They",
      "They're",
      "They’re",
      "This",
      "To",
      "Us",
      "Was",
      "Wasn't",
      "Wasn’t",
      "We",
      "We're",
      "We’re",
      "Were",
      "Weren't",
      "Weren’t",
      "What",
      "What's",
      "What’s",
      "When",
      "Where",
      "Which",
      "Who",
      "Who's",
      "Who’s",
      "Whose",
      "Why",
      "Will",
      "Won't",
      "Won’t",
      "Would",
      "Wouldn't",
      "Wouldn’t",
      "Yes",
      "Yet",
      "You",
      "You're",
      "You’re",
      "Your"
    ].includes(words[0])){
      words[0] = words[0].toLowerCase();
      $('#isLowerCase').prop('checked', true);
    } else if(words[i].endsWith("ing")){
      words[0] = words[0].toLowerCase();
      $('#isLowerCase').prop('checked', true);
    } else if($('#isLowerCase').prop('checked')){
      words[0] = words[0].toLowerCase();
    }
    for(let i=0; i<20;i++){
      $(`#sort_sentence_word${i + 1}`).val(words[i] || "");
    }
  }
  $("#isLowerCase").on("change", function(){
    if($('#isLowerCase').prop('checked')){
      let word = $('#sort_sentence_word1').val();
      $("#sort_sentence_word1").val(word.toLowerCase());
    } else{
      let word = $('#sort_sentence_word1').val();
      word = word.charAt(0).toUpperCase() + word.slice(1);
      $('#sort_sentence_word1').val(word);
    }
    $("#sort_sentence_word1").val($("#sort_sentence_word1").val());
  });

</script>
